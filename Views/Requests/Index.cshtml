@model IEnumerable<AspnetCoreMvcStarter.Models.Request>

@{
  ViewData["Title"] = "Request Management";
  int currentPage = ViewBag.CurrentPage;
  int totalPages = ViewBag.TotalPages;
  string currentSearch = ViewBag.Search ?? "";

  // Get filter values from ViewBag
  string statusFilter = ViewBag.StatusFilter ?? "";
  string severityFilter = ViewBag.SeverityFilter ?? "";
  string facilityFilter = ViewBag.FacilityFilter ?? "";
  string assigneeFilter = ViewBag.AssigneeFilter ?? "";
}

<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="card-title mb-0">Request List</h5>
    <div>
      <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#filtersCollapse" aria-expanded="false" aria-controls="filtersCollapse">
        <i class="bx bx-filter-alt me-1"></i>Filters
      </button>
      <a asp-action="Create" class="btn btn-success ms-2">
        <i class="bx bx-plus me-1"></i>Create New
      </a>
    </div>
  </div>

  <div class="card-body">
    <div class="collapse mb-3" id="filtersCollapse">
      <div class="card card-body bg-light">
        <form asp-action="Index" method="get" id="filterForm">
          <input type="hidden" name="search" value="@currentSearch" />
          <div class="row g-3">
            <div class="col-md-3">
              <label class="form-label">Status</label>
              <select name="statusFilter" class="form-select" onchange="document.getElementById('filterForm').submit()">
                <option value="">All Statuses</option>
                @foreach (var status in new[] { "Open", "In Progress", "Rejected", "Closed" })
                {
                  <option value="@status" selected="@(statusFilter == status)">@status</option>
                }
              </select>
            </div>
            <div class="col-md-3">
              <label class="form-label">Severity</label>
              <select name="severityFilter" class="form-select" onchange="document.getElementById('filterForm').submit()">
                <option value="">All Severities</option>
                @foreach (var severity in new[] { "Low", "Medium", "High", "Critical", "Urgent" })
                {
                  <option value="@severity" selected="@(severityFilter == severity)">@severity</option>
                }
              </select>
            </div>
            <div class="col-md-3">
              <label class="form-label">Facility</label>
              <select name="facilityFilter" class="form-select" onchange="document.getElementById('filterForm').submit()">
                <option value="">All Facilities</option>
                @if (ViewBag.Facilities != null)
                {
                  foreach (var facility in ViewBag.Facilities)
                  {
                    <option value="@facility.Value" selected="@(facilityFilter == facility.Value)">@facility.Text</option>
                  }
                }
              </select>
            </div>
            <div class="col-md-3">
              <label class="form-label">Assignee</label>
              <select name="assigneeFilter" class="form-select" onchange="document.getElementById('filterForm').submit()">
                <option value="">All Assignees</option>
                @if (ViewBag.Assignees != null)
                {
                  foreach (var assignee in ViewBag.Assignees)
                  {
                    <option value="@assignee.Value" selected="@(assigneeFilter == assignee.Value)">@assignee.Text</option>
                  }
                }
              </select>
            </div>
          </div>
          <div class="row mt-3">
            <div class="col-12 text-end">
              <a asp-action="Index" class="btn btn-outline-secondary">Clear Filters</a>
            </div>
          </div>
        </form>
      </div>
    </div>

    <div class="row mb-3">
      <div class="col-md-6">
        <form asp-action="Index" method="get" class="d-flex justify-content-end">
          <div class="input-group">
            <input type="text" name="search" value="@currentSearch" class="form-control" placeholder="Search requests...">
            <button type="submit" class="btn btn-primary">Search</button>
          </div>
        </form>
      </div>
    </div>

    @if (ViewData["ErrorMessage"] != null)
    {
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @ViewData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    }

    @if (ViewData["SuccessMessage"] != null)
    {
      <div class="alert alert-success alert-dismissible fade show" role="alert">
        @ViewData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    }

    @if (!string.IsNullOrEmpty(currentSearch) || !string.IsNullOrEmpty(statusFilter) || !string.IsNullOrEmpty(severityFilter) || !string.IsNullOrEmpty(facilityFilter) || !string.IsNullOrEmpty(assigneeFilter))
    {
      <div class="alert alert-info mb-3">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <p class="mb-0">
              <strong>Filters applied:</strong>
              @if (!string.IsNullOrEmpty(currentSearch)) { <span class="badge bg-primary me-2">Search: @currentSearch</span> }
              @if (!string.IsNullOrEmpty(statusFilter)) { <span class="badge bg-secondary me-2">Status: @statusFilter</span> }
              @if (!string.IsNullOrEmpty(severityFilter)) { <span class="badge bg-secondary me-2">Severity: @severityFilter</span> }
              @if (!string.IsNullOrEmpty(facilityFilter)) { <span class="badge bg-secondary me-2">Facility ID: @facilityFilter</span> }
              @if (!string.IsNullOrEmpty(assigneeFilter)) { <span class="badge bg-secondary me-2">Assignee ID: @assigneeFilter</span> }
            </p>
          </div>
          <a asp-action="Index" class="btn btn-sm btn-outline-info">Clear All</a>
        </div>
      </div>
    }

    <div class="table-responsive">
      <table class="table table-striped">
        <thead>
        <tr>
          <th>REQUESTOR</th>
          <th>ASSIGNEE</th>
          <th>FACILITY</th>
          <th>ITEM</th>
          <th>QUANTITY</th>
          <th>LEVEL</th>
          <th>STATUS</th>
          <th>REQUEST DATE</th>
          <th class="text-center">ACTIONS</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Model)
        {
          <tr>
            <td>
              <div class="d-flex align-items-center">
                <div class="avatar me-2">
                    <span class="avatar-initial rounded-circle bg-label-primary">
                      @(item.Requestor?.FullName?[0].ToString().ToUpper() ?? "N/A")
                    </span>
                </div>
                @(item.Requestor?.FullName ?? "Unknown")
              </div>
            </td>
            <td>
              @if (item.AssigneeId.HasValue)
              {
                var assigneeName = ViewBag.AssigneeNames != null && ViewBag.AssigneeNames.ContainsKey(item.AssigneeId.Value)
                  ? ViewBag.AssigneeNames[item.AssigneeId.Value]
                  : item.AssigneeId.ToString();
                @assigneeName
              }
              else
              {
                <span class="text-muted">Unassigned</span>
              }
            </td>
            <td>@(item.Facility?.FacilityName ?? "N/A")</td>
            <td>@(item.FacilityItem?.ItemName ?? "N/A")</td>
            <td>@item.QuantityRequested</td>
            <td>
                <span class="badge @GetSeverityBadgeClass(item.SeverityLevel)">
                  @(item.SeverityLevel ?? "N/A")
                </span>
            </td>
            <td>
              <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="status-@item.RequestId" data-bs-toggle="dropdown" aria-expanded="false" style="min-width: 90px;">
                  @(item.Status ?? "Open")
                </button>
                <ul class="dropdown-menu status-dropdown-menu" aria-labelledby="status-@item.RequestId" data-request-id="@item.RequestId" data-original-status="@item.Status">
                  @foreach (var status in new[] { "Open", "In Progress", "Rejected", "Closed" })
                  {
                    <li><a class="dropdown-item status-option @(item.Status == status ? "active" : "")" href="#" data-status="@status">@status</a></li>
                  }
                </ul>
              </div>
            </td>
            <td>@(item.RequestDate.ToString("dd/MM/yyyy HH:mm"))</td>
            <td class="text-center">
              <div class="d-flex justify-content-center gap-2">
                <a asp-action="Details" asp-route-id="@item.RequestId" class="btn btn-info btn-sm">
                  <i class="bx bx-info-circle"></i>
                  <span>Details</span>
                </a>
                <a asp-action="Assign" asp-route-id="@item.RequestId" class="btn btn-warning btn-sm">
                  <i class="bx bx-user-check"></i>
                  <span>Assign</span>
                </a>
                <a asp-action="Edit" asp-route-id="@item.RequestId" class="btn btn-primary btn-sm">
                  <i class="bx bx-edit"></i>
                  <span>Edit</span>
                </a>
                <a asp-action="Delete" asp-route-id="@item.RequestId" class="btn btn-danger btn-sm">
                  <i class="bx bx-trash"></i>
                  <span>Delete</span>
                </a>
              </div>
            </td>
          </tr>
        }
        </tbody>
      </table>
    </div>

    @if (totalPages > 1)
    {
      <div class="d-flex justify-content-center mt-3">
        <ul class="pagination">
          <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <a class="page-link" asp-action="Index" asp-route-page="@(currentPage - 1)" asp-route-search="@currentSearch"
               asp-route-statusFilter="@statusFilter" asp-route-severityFilter="@severityFilter"
               asp-route-facilityFilter="@facilityFilter" asp-route-assigneeFilter="@assigneeFilter">
              <i class="bx bx-chevron-left"></i>
            </a>
          </li>
          @for (int i = 1; i <= totalPages; i++)
          {
            <li class="page-item @(currentPage == i ? "active" : "")">
              <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-search="@currentSearch"
                 asp-route-statusFilter="@statusFilter" asp-route-severityFilter="@severityFilter"
                 asp-route-facilityFilter="@facilityFilter" asp-route-assigneeFilter="@assigneeFilter">@i</a>
            </li>
          }
          <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
            <a class="page-link" asp-action="Index" asp-route-page="@(currentPage + 1)" asp-route-search="@currentSearch"
               asp-route-statusFilter="@statusFilter" asp-route-severityFilter="@severityFilter"
               asp-route-facilityFilter="@facilityFilter" asp-route-assigneeFilter="@assigneeFilter">
              <i class="bx bx-chevron-right"></i>
            </a>
          </li>
        </ul>
      </div>
    }
  </div>
</div>

@functions {
  private string GetSeverityBadgeClass(string severityLevel)
  {
    return severityLevel switch
    {
      "Low" => "bg-label-info",
      "Medium" => "bg-label-warning",
      "High" => "bg-label-danger",
      "Critical" => "bg-label-danger",
      "Urgent" => "bg-label-danger",
      _ => "bg-label-secondary"
    };
  }

  private string GetStatusBadgeClass(string status)
  {
    return status switch
    {
      "New" => "bg-label-primary",
      "Open" => "bg-label-warning",
      "Closed" => "bg-label-success",
      "In Progress" => "bg-label-info",
      "Rejected" => "bg-label-danger",
      _ => "bg-label-secondary"
    };
  }
}

<style>
  .avatar {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .avatar-initial {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
  }

  .btn-sm {
    padding: 0.5rem 1rem;
    font-size: 0.75rem;
  }

  .dropdown-toggle::after {
    margin-left: 0.5em;
  }

  /* Added styles for filter badges */
  .badge {
    font-size: 0.75rem;
    padding: 0.35rem 0.65rem;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Status update functionality
    document.querySelectorAll(".status-option").forEach(option => {
      option.addEventListener("click", function (e) {
        e.preventDefault();

        const newStatus = this.getAttribute("data-status");
        const dropdownMenu = this.closest(".status-dropdown-menu");
        const requestId = dropdownMenu.getAttribute("data-request-id");
        const originalStatus = dropdownMenu.getAttribute("data-original-status");
        const statusButton = document.getElementById("status-" + requestId);

        if (confirm("Are you sure you want to update the status?")) {
          fetch('/Requests/UpdateStatus', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ requestId: requestId, status: newStatus })
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                alert("Status updated successfully!");
                statusButton.textContent = newStatus;
                dropdownMenu.setAttribute("data-original-status", newStatus);

                // Update active class
                dropdownMenu.querySelectorAll(".status-option").forEach(opt => {
                  opt.classList.remove("active");
                });
                this.classList.add("active");
              } else {
                alert("Error updating status: " + data.message);
              }
            })
            .catch(error => {
              alert("Request failed: " + error);
            });
        }
      });
    });

    // Show filter collapse if any filter is applied
    if (document.querySelectorAll('.badge.bg-secondary').length > 0) {
      var filterCollapse = new bootstrap.Collapse(document.getElementById('filtersCollapse'), {
        toggle: true
      });
    }
  });
</script>
