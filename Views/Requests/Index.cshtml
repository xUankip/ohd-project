@model IEnumerable<AspnetCoreMvcStarter.Models.Request>

@{
  ViewData["Title"] = "Request Management";
  int currentPage = ViewBag.CurrentPage;
  int totalPages = ViewBag.TotalPages;
  string currentSearch = ViewBag.Search ?? "";
}

<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="card-title mb-0">Request Management</h5>
  </div>

  <div class="card-body">
    <div class="row mb-3">
      <div class="col-md-6">
        <a asp-action="Create" class="btn btn-primary">
          <i class="bx bx-plus me-1"></i>Create New Request
        </a>
      </div>
      <div class="col-md-6">
        <form asp-action="Index" method="get" class="d-flex justify-content-end">
          <div class="input-group">
            <input type="text" name="search" value="@currentSearch" class="form-control" placeholder="Search requests...">
            <button type="submit" class="btn btn-primary">Search Requests</button>
          </div>
        </form>
      </div>
    </div>

    <div class="table-responsive">
      <table class="table table-striped">
        <thead>
        <tr>
          <th>Facility</th>
          <th>Item</th>
          <th>Quantity</th>
          <th>Level</th>
          <th>Status</th>
          <th>Time</th>
          <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Model)
        {
          <tr>
            <td>@(item.Facility?.FacilityName ?? "N/A")</td>
            <td>@(item.FacilityItem?.ItemName ?? "N/A")</td>
            <td>@item.QuantityRequested</td>
            <td>
              @if (!string.IsNullOrEmpty(item.SeverityLevel))
              {
                <span class="badge @(item.SeverityLevel == "Critical" ? "bg-danger" :
                                   item.SeverityLevel == "High" ? "bg-warning" :
                                   item.SeverityLevel == "Medium" ? "bg-primary" :
                                   item.SeverityLevel == "Low" ? "bg-success" :
                                   "bg-secondary")">
            @item.SeverityLevel
        </span>
              }
              else
              {
                <span class="badge bg-secondary">N/A</span>
              }
            </td>
            <td>
              <div class="d-flex align-items-center">
                <select class="form-select form-select-sm ms-4 status-dropdown"
                        data-request-id="@item.RequestId"
                        data-current-status="@item.Status"
                        style="width: auto; margin-left: 15px;">
                  @{
                    var statusOptions = new[] { "Open", "In Progress", "Approved", "Pending", "Rejected", "Closed" };
                  }
                  @foreach (var status in statusOptions)
                  {
                    <option value="@status" selected="@(status == item.Status)">@status</option>
                  }
                </select>
              </div>
            </td>
            <td>@(item.RequestDate.ToString("dd/MM/yyyy HH:mm"))</td>
            <td>
              <div class="d-flex gap-2">
                <a asp-action="Details" asp-route-id="@item.RequestId" class="btn btn-info btn-sm">Details</a>
                <a asp-action="Assign" asp-route-id="@item.RequestId" class="btn btn-primary btn-sm">Assign</a>
              </div>
            </td>
          </tr>
        }
        </tbody>
      </table>
    </div>
  </div>
</div>

@section Scripts {
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      document.querySelectorAll(".status-dropdown").forEach(dropdown => {
        dropdown.addEventListener("change", function () {
          const requestId = this.getAttribute("data-request-id");
          const currentStatus = this.getAttribute("data-current-status");
          const newStatus = this.value;

          if (confirm(`Are you sure you want to change status from ${currentStatus} to ${newStatus}?`)) {
            fetch(`/Requests/UpdateStatus`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest"
              },
              body: JSON.stringify({ requestId, status: newStatus })
            })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  this.setAttribute("data-current-status", newStatus);
                  alert("Status updated successfully!");
                } else {
                  this.value = currentStatus;
                  alert("Failed to update status.");
                }
              })
              .catch(error => {
                console.error("Error:", error);
                this.value = currentStatus;
                alert("An error occurred while updating status.");
              });
          } else {
            this.value = currentStatus;
          }
        });
      });
    });
  </script>

  <style>
    .table td, .table th {
      padding: 8px 12px; /* Reduce padding */
    }

    .level-column {
      width: 120px; /* Adjust width of Level */
      text-align: center;
    }

    .status-column {
      width: 150px; /* Adjust width of Status */
    }

    .badge {
      font-size: 14px;
      padding: 5px 10px;
    }

    .form-select {
      width: 100%;
      padding: 3px;
    }

    .table thead th {
      text-align: center;
    }

    .table tbody td {
      text-align: center;
    }
  </style>
}
